.box-edit
  = form_for product, as: "product_#{product.id}", remote: true, html: {data: {loading: true}},
    url: {controller: :suppliers_plugin_product, action: :edit, id: product ? product.id : nil} do |f|
    .internal-table
      .title
        = t'views.product._edit.distribution_setts'

      .row.first

        .block.margin-price
          .field
            = f.label :margin_percentage, t('views.product._edit.margin_price')
          div.checkbox data-default-toggle=""
            label name='default_margin_percentage'
              = f.check_box :default_margin_percentage
              = t'views.product._edit.default_margin'
          div data-non-defaults=""
            span.field-secondary.with-unit
              = input_group_addon('%'){ f.text_field :margin_percentage, class: 'product-margin-percentage', value: product.margin_percentage_localized, onkeyup: 'suppliers.our_product.pmsync(this, true);' }

            span.field-secondary.with-unit
              = hidden_field_tag :base_price, product.from_product.price, class: 'product-base-price', id: 'product_base_price',
                value: product.from_product.price_as_currency_number
              = input_group_addon(environment.currency_unit){ f.text_field :price, class: 'product-price', value: product.price_as_currency_number, onkeyup: 'suppliers.our_product.pmsync(this, false);' }

        .block.stock
          .field
            = f.label :stock, t('views.product._edit.stock')
          div.checkbox data-default-toggle=""
            label name='default_stored'
              = f.check_box :default_stored
              = t'views.product._edit.default_stock'
          div data-non-defaults=""
            span.field-secondary
              = f.label :stored, t('views.product._edit.current_stock'), class: 'field-bellow'
              = f.text_field :stored

        .block.available
          .field
            = f.label :available, t('views.product._edit.distribution_state')
          div.checkbox
            label name='available'
              = f.check_box :available
              = t'views.product._edit.available'

      .row.second
        .block.unit
          .field
            = f.label :unit_id, t('views.product._edit.selling_unit')
          div.checkbox data-default-toggle=""
            label name='default_unit'
              = f.check_box :default_unit
              = t'views.product._edit.same_from_purchase'
          div data-non-defaults=""
            span.field-secondary
              = f.label :unit_id, t('views.product._edit.unit'), class: 'field-bellow'
              = f.select :unit_id, options_for_select(@units.map{ |u| [u.name, u.id]})
            span.field-secondary
              = f.label :unit_detail, t('views.product._edit.unit_detail'), class: 'field-bellow'
              = f.text_field :unit_detail

    .action-button-container
      = f.submit t('views.product._edit.save'), class: 'save'
      = link_to_function t('views.product._edit.cancel'), '', class: 'action-button cancel', 'toggle-edit' => ''
      = link_to_remote t('views.product._edit.remove_product'), remote: true, confirm: t('views.product._edit.are_you_sure_you_want'),
        url: {controller: :suppliers_plugin_product, action: 'destroy', id: product.id }, class: 'action-button remove',
        html: {data: {loading: "#our-product-#{product.id}"}}

  .links
    - supplier_url = {controller: :manage_products, action: :show, id: product.supplier_product.id, profile: product.supplier.identifier}
    - if product.own?
      = link_to t('views.product._edit.product_registry'),
        {controller: :manage_products, action: :show, id: product.id},
        target: '_blank', class: 'action-button registry'
    - elsif product.supplier.dummy?
      = link_to t('views.product._edit.product_registry'), supplier_url,
        target: '_blank', class: 'action-button supplier'
    - else
      = link_to t('views.product._edit.view_on_supplier_page'), supplier_url,
        target: '_blank', class: 'action-button supplier'

javascript:
  suppliers.our_product.load(#{product.id});

