#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../config/environment'
require 'logger'
require 'iconv' unless RUBY_VERSION >= "1.9"

#monkey patch
User::Mailer.class_eval do 
    def script_welcome_email(user, enterprise, community = nil)
      #recipients  user.person.email
      recipients "cirandas@fbes.org.br"
      from "SACC <cirandas@fbes.org.br>"
      subject _("Bem vinda/o ao CIRANDAS")
      content_type "text/html"      
      body :name => user.person.name,
        :enterprise => enterprise,
        :login => user.login,
        :password =>  user.password,
        :change_pass_link =>  "http://cirandas.net/account/forgot_password",
        :help => {:index => "http://cirandas.net/ajuda", :videos => "http://cirandas.net/ajuda/video-aulas-sobre-cirandas"},
        :fbes => {:link => "http://www.fbes.org.br/", :name => "FBES - Forum Brasileiro de Economia Solidária"},
        :community => community
    end
end

def create_login( name, cont )    
  login =  name.split(' ')[0] + name.split(' ')[-1] + cont.to_s
  login = ActiveSupport::Inflector.transliterate(login).downcase
  if User.find_by_login( login ).blank?    
    return login
  else
    cont = 0 if cont == ""
    cont = cont + 1
    return create_login( name, cont )
  end
end

def create_newpass( len = 8 )
  chars = ("a".."z").to_a + ("A".."Z").to_a + ("0".."9").to_a
  Array.new(len){ || chars[rand(chars.size)] }.join
end

def create_user( name, mail, fone, city, state )
  user = nil
  # MULT_STRING = 1
  if mail.blank?
    $log.error 'Email não pode ser nulo...usuário não foi criado!'    
    return nil
  else
    mail = mail.gsub("\302\240", ' ').strip.downcase.gsub(" ", "")
    login = create_login( name.gsub("\302\240", ' ').strip.downcase, "" ) 
  end
  # PASS_LEN = 6
  pass = create_newpass( 6 )

  $log.info "Criando usuário: login %s and password %s and email %s ..." % [ login, pass, mail ] 
  begin
    if !Profile[ login ].blank?
      $log.info "Não foi possível criar um usuário com login %s, pois já existe um perfil que usar este login como identificador! " % login
      return nil
    end
    p = proc{ $log.warn 'Não será enviada notificação via e-mail com link de ativação o usuário será ativado automaticamente.' }
    User.send :define_method, :activate, &p 
    User.send :define_method, :deliver_activation_code, &p
    User.send :define_method, :delay_activation_check, &p
    user = User.new({
      :login => login,
      :email => mail,
      :password => pass,
      :password_confirmation => pass,
      :environment => Environment.default,
      :terms_accepted => "1",
      :terms_of_use => Environment.default.terms_of_use
    })
    $log.info "Registrando dados pessoais do usuário..." 
    if !name.blank? and !city.blank? and !state.blank?
      data = {:name => name, :zip_code => '', :city => city, :contact_phone => fone, :address => state}
      $log.info 'Registrado nome %s - cidade %s - estado %s - fone %s !' % [ name.upcase, city.upcase, state.upcase, fone ]
    else
      data = {:name => name, :zip_code => '', :city => city, :contact_phone => fone, :address => state} 
     $log.info 'Não registrado havia dados incompletos!'
    end    
    user.person_data = data
    person = Person.new(data)
    person.environment = user.environment
    $log.info "Registrado!" 

    $log.info "Verificando se o login está funcionando..." 
    if user.signup!
      $log.info "Verificado!"
    end   
 
    $log.info 'Ativando o usuário...'
    if User[ user.login ]
           user.activate
      $log.info 'Ativado!'    
    end  
    return user
  rescue Exception => e
    $log.fatal 'Não foi possível criar ou ativar o usuário...devido a excessão %s' % [ e.message ]
    $log.fatal e.backtrace
    return nil
  end  
end

def find_or_create_users( adm_users )
  i = 0
  adm_users.map do |u|   
    i = i+1
    if !u[:mail].blank?
      $log.info "Verificando se o usuário já existe...."    
      user = User.find_by_email( u[:mail].strip.downcase )
      if user.blank?
        $log.info "não existe usuario com e-mail %s ...." % [ u[:mail].downcase ]
        user = create_user( u[:name], u[:mail], u[:fone], u[:city], u[:state] )
      end    
    else
      $log.info "O %sº e-mail não foi informado, usuário não foi criado!" % i.to_s
    end
    user
  end.compact  
end

def add_adm_users( enterprise, users )
  users.each do |user|
    $log.info "Adicionando usuário %s como %s administrador..." % [ user.name, enterprise.name ] 
    if enterprise.add_admin( user.person )
      begin
        community_id = enterprise.identifier.gsub!("ees-").blank?
        community = Community[ identifier ] if !community_id.blank?
        User::Mailer.deliver_script_welcome_email( user, enterprise, community )
        $log.info "concluído!"
      rescue Net::SMTPAuthenticationError, Net::SMTPServerBusy, Net::SMTPSyntaxError, Net::SMTPFatalError, Net::SMTPUnknownError => e
        $log.fatal "Não foi possível enviar o e-mail para %s...devido a excessão %s" % [ user.person.email, e ] 
        $log.fatal e.backtrace
      end
    else
      $log.error "não foi possível adicionar usuário %s como administrador do emprendimento..." % user.person.name
    end    
  end
end

def load_file(file_path, state)
  require 'csv'
  adm_users = []
  enterprises = []
  csv_line_reader = CSV.open(file_path, 'r')
  csv_line_reader.shift  
  csv_line_reader.each do |array|
    user = {:name => array[3], :mail => array[4], :fone => array[5], :city => array[2], :state => state }
    user2 = {:name => array[6], :mail => array[7], :fone => array[8], :city => array[2], :state => state }   
    adm_users << user
    adm_users << user2
    enterprises << {:name => array[0], :identifier=> array[1], :adm_users => adm_users, :city => array[2], :state => state }
    adm_users = []
  end
  enterprises
end

def activate_enterprise( enterprise )
   enterprise.admins.each do |owner|
   $log.info "Ativando emprendimento %s com %s como dono ..." % [ enterprise.name.upcase, owner.name.upcase ]
   if enterprise.enable( owner )
      $log.info "ativado!"
      return 
    else
      $log.error "não foi possível ativar o emprendimento %s" % enterprise.name.upcase
    end
  end
end

def create_enterprise( name, identifier, year, city, state )
  $log.info "Criando emprendimento %s..." % [ name.upcase ]
  identifier = name.downcase.to_slug if identifier.blank?
  identifier = ActiveSupport::Inflector.transliterate(identifier.downcase.to_slug)
  profile = Profile[ identifier ] 
  identifier = "ees-" + identifier if !profile.blank? and !profile.enterprise? 
  name = name.gsub("\302\240", ' ').strip
  identifier = identifier.gsub("\302\240", ' ').strip 
  $log.info "Id = %s..." % identifier
  enterprise = Enterprise.new(
    :name => name,        
    :identifier => identifier,
    :enabled => false,
    :foundation_year => year,
    :lat => nil,
    :lng => nil,
    :environment => Environment.default
  )
  begin
    enterprise.save!
    $log.info "Emprendimento criado!" 
    return enterprise
  rescue Exception => e
    $log.fatal 'Não foi possível criar o emprendimento devido a excessão %s' % [ e.message ]
    $log.fatal e.backtrace 
    return nil
  end
end

def import_stats(count = nil, errors = 0)
  imported = 0
  if !count.blank?
    imported = count - errors
  end
  stats = { :to_import => count, :imported => imported } 
end

start_time = Time.now
puts start_time

puts "Este script foi desenvolvido para a chamada de entrada de novos emprendimentos, mais detalhes aqui -> http://cirandas.net/fbes/blog/fbes-abre-o-cirandas-para-cadastro-de-novos-empreendimentos"
puts ""
puts "Antes de executá-lo siga as intruções abaixo:"
puts "  1. remover as linhas extras, aquelas com explicação de uso, deixando apenas o cabeçalho de cada coluna."
puts "  2. remover o nome do estado, afinal cada forum estadual vai enviar sua planilha separadamente."
puts "  3. procurar por e-mail repetidos, pois  o CIRANDAS.NET não aceita criar usuário com email repeditos"
puts "    -> dica: faça um hide nas colunas F e G (telefone da 1ª pessoa e nome da 2ª pessoa)"
puts "    -> se encontrar: salve em uma outra planilha para reportar ao forum estadual, quem sabe solicitando ao emprendimento outro e-mail"
puts "  4. salvar como .CSV, escolha Use Txt Format; Charset UTF8; delimitador de campo vírgula (,); delimitador de texto aspas duplas ('""')"
puts "No caso de muitos erros retorne para as intruções de uso à cima."

file = nil
if ARGV.blank?
  exit
else
  file = ARGV[0]
  state = ARGV[1]
end

log_path = File.dirname(__FILE__) + "/../log/"
log_date = start_time.strftime "%Y-%m-%d_%H:%M:%S"
log_name = '%s-script-import-%s.txt' % [ log_date, state ]
$log = Logger.new( log_path + log_name )
$log.debug "Arquivo de log Criado!"

$log.debug "Carregando empreendimento enviados pelo %s  do arquivo %s  para a memoria..." % [ state, file ]
enterprises = load_file( file, state )
$log.debug "Carregado!"

$log.debug "Iniciando importação. Esta operação pode demorar algum tempo..."
error_enterprises = 0
enterprises.each do |e|    
  enterprise = create_enterprise( e[:name], e[:identifier], e[:foundation_year], e[:city], e[:state] )
  if enterprise.blank?
    error_enterprises = error_enterprises + 1
  else
    users = find_or_create_users( e[:adm_users] )
    if !users.blank? and !enterprise.blank?
      add_adm_users( enterprise, users )
      activate_enterprise( enterprise )
    end 
  end
  $log.debug "."
  puts "."
end
$log.debug "Importação finalizada!"

summary = import_stats( enterprises.count,  error_enterprises )
puts "------------"
puts "Eram esperados %s novos emprendimentos..." % [ summary[:to_import] ] 
puts "Foram importados %s..." % [  summary[:imported] ]
puts "Aconteceram %s erros..." % [ error_enterprises ]

