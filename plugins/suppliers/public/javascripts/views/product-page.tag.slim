product-page
  .head
    h1.title
      |{t("views.product.products")}

    .filter
      input type='hidden' value="{page}"

      h4
        |{t("views.product.filter")}
      form.form-inline
        .form-group
          .name
            input type="text" id="filter_name" placeholder="{t('views.product.product_name')}" onkeyup="{search}"

        .form-group.category
          select name="category_id" id="filter_category" onchange="{search}"
            option each="{id,name in categories}" value="{id}" selected="{name == filter_category}"
              |{name}

        .form-group.supplier
          select name="supplier_id" id="filter_supplier" onchange="{search}"
            option each="{id,name in suppliers}" value="{id}" selected="{id == filter_supplier}"
              |{name}

        .form-group.state
          select name='available' onchange="{search}"
            option value="" selected="{filter_state == ''}"
              |{t('views.product.situation')}
            option value="true" selected="{filter_state == 'true'}"
              |{t('views.product.active')}
            option value="false" selected="{filter_state == 'false'}"
              |{t('views.product.inactive')}
    p.filter_stats
      |{t('views.product.showing', {count: this.count})}

  .mass_actions
    strong
      |{t('views.product.mass_action')}
    select name='action' id='mass_action_select'
      option value="activate"
        |{t('views.product.activate')}
      option value="deactivate"
        |{t('views.product.deactivate')}
    button name='ok' onclick="{massAction}" class="default"
      |{t('views.product.ok')}


  .clear
  .products-listing.table-responsive
    .table
      .header
        .image
          |{t('views.product.image')}
        .state
          |{t('views.product.state')}
        .name
          |{t('views.product.name')}
        .supplier
          |{t('views.product.supplier')}
        .category
          |{t('views.product.category')}
        .margin
          |{t('views.product.margin')}
        .stock
          |{t('views.product.stock')}
        .total_price
          |{t('views.product.total_price_currency')}
        .supplier_price
          |{t('views.product.supplier_price_currency')}
        .unit
          |{t('views.product.unit')}

      product-item each="{product in products}" product="{product}" class="{product.available ? 'available':'disabled'}"

      stock-modal
      product-modal

  javascript:
    this.t = window.products.t
    this.hasLoadedUnavailableProducts = false

    this.products = opts.products
    this.categories = opts.categories
    this.suppliers = opts.suppliers
    this.units = opts.units

    this.default_margin_percentage = opts.default_margin_percentage
    this.page = opts.page
    this.filter_state = 'true'
    this.count = this.products.length

    massAction(e) {
     if (this.mass_action_select.value == 'activate') {
      this.changeState('activate')
     }
     else if (this.mass_action_select.value == 'deactivate') {
      this.changeState('deactivate')
     }
    }

    changeState(state) {
      var checked = $('.product-select:checked')
      if (checked) {
        var productItems = checked.parents('product-item')
        var products = []
        productItems.each(function(i, product) {
          products.push(product._tag.product.id)
        })

        if (products) {
          self = this
          updateUrl = Routes.suppliers_plugin_product_path({profile: noosfero.profile, action: state})
          $.post(updateUrl,{ids: products}, function(response) {
            if (response == 'success') {
              productItems.each(function(i, product) {
                var func = product._tag[state]
                if (!func) return
                func();
              })
              self.update()
            }
          })
        }
      }
    }

    search() {
      if ($('select[name="available"]')[0].value == 'false')
        this.loadUnavailableProducts()

      for (var i in this.products) {
        if (this.filter_name.value) {
          if (this.products[i].name.toLowerCase().indexOf(this.filter_name.value.toLowerCase()) < 0) {
            this.products[i].selected = false
            continue
          }
        }
        if (this.filter_category.value != "0") {
          if (this.products[i].product_category_id.toString() != this.filter_category.value) {
            this.products[i].selected = false
            continue
          }
        }
        if (this.filter_supplier.value != "0") {
          if (this.products[i].supplier_id != this.filter_supplier.value) {
            this.products[i].selected = false
            continue
          }
        }
        if ($('select[name="available"]')[0].value) {
          if (this.products[i].available.toString() != $('select[name="available"]')[0].value) {
            this.products[i].selected = false
            continue
          }
        }
        this.products[i].selected = true
      }
    }

    loadUnavailableProducts() {
      console.log(this.hasLoadedUnavailableProducts)
      if (this.hasLoadedUnavailableProducts)
        return

      var self = this
      var loadUrl = Routes.suppliers_plugin_product_path({profile: noosfero.profile, action: 'unavailable'});
      $.get(loadUrl, function(response) {
        if (response) {
          for (var i in response) {
            self.products.push(response[i])
          }
          self.hasLoadedUnavailableProducts = true
        }
      });

    }

    stopEdition() {
      this.products.forEach(function(p) {
        p.edition = false;
      })
    }

    setStockModal(product) {
      this.tags['stock-modal'].product = product
      this.tags['stock-modal'].update()
    }

    completeEdition(product, productItem) {
      this.tags['product-modal'].product = product
      this.tags['product-modal'].productItem = productItem
      this.tags['product-modal'].update()
    }

    typeaheadCategoryInit (input, selected) {
      var categoryUrl = Routes.suppliers_plugin_product_path({profile: noosfero.profile, action: 'categories'})+'?query=%QUERY'
      source = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        remote: categoryUrl,
      })
      source.initialize()

      input.typeahead(
        { minLength: 3, highlight: true, },
        { displayKey: 'name', source: source.ttAdapter(), }
      )

      input.on('typeahead:selected', selected)
    }

    typeaheadUnitInit (input, selected) {
      source = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        local: this.units,
      })
      source.initialize()

      input.typeahead(
        { minLength: 1, highlight: true, },
        { displayKey: 'name', source: source.ttAdapter() }
      )

      input.on('typeahead:selected', selected)
    }

