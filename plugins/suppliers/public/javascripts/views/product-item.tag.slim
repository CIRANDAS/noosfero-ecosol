product-item  class="{edition: product.edition}" show="{product.selected}"
  .image
    input type='checkbox' class='product-select'
    .image-box
      img src="{product.image_portrait}" if="{product.image_portrait}"
      div.image-placeholder if="{!product.image_portrait}"

  .state
    div class="{product.available ? 'active':'inactive'}" show="{!product.edition}"
    .switch show="{product.edition}"
      input.cmn-toggle.cmn-toggle-round type="checkbox" name='available' checked="{product.available}" id="{'available-'+product.id}"
      label for="{'available-'+product.id}"
  .name
    span show="{!product.edition}"
      |{product.name}
    input type="text" value="{product.name}" show="{product.edition}" name='name'
  .supplier
    .overflow
      |{supplier}
  .category
    span show="{!product.edition}"
      |{product.category}
    .white-wrap
      input type="text" value="{product.category}" show="{product.edition}" class='category' name='product_category_id'
  .margin
    span show="{!product.edition}"
      |{product.margin_percentage}
    .input-group
    input type="number" step="0.01" value="{product.margin_percentage}" name="margin_percentage" show="{product.edition}" oninput="{updatePrice}"
  .stock
    span if="{!product.use_stock && !product.edition}"
      |&#8212;
    span if="{product.use_stock && !product.edition}"
      |{product.stored}
    button onclick="{editStock}" show="{product.edition}" data-toggle="modal" data-target="stock-modal" class="default"
      |{t('views.product.edit')}
  .total_price
    |{product.price}

  .supplier_price
    span show="{!product.edition}"
      |{product.supplier_price}
    input type="number" step="0.01" value="{product.supplier_price}" name="supplier_price" show="{product.edition}" class='price' oninput="{updatePrice}"
  .unit
    .unit_name show="{!product.edition}"
      |{product.unit}
    .white-wrap
      input type="text" value="{product.unit}" show="{product.edition}" name="unit_id"
  .actions
    .fast_edition onclick="{edit}" show="{!product.edition}"
      .img
      |{t('views.product.fast_edition')}
    .complete_edition show="{!product.edition}" onclick="{completeEdition}" data-toggle="modal" data-target="product-modal"
      .img
      |{t('views.product.complete_edition')}
    .save_edition show="{product.edition}"
      button onclick="{save}" class="default"
        |{t('views.product.save')}
      i class="fa fa-times close-cross" onclick="{close}"

    .clear

  javascript:
    this.product  = opts.product
    this.supplier = this.parent.suppliers[this.product.supplier_id]
    this.product.category = this.parent.categories[this.product.product_category_id]
    this.product.margin_percentage = this.product.margin_percentage || this.parent.default_margin_percentage
    this.product.edition = false
    this.product.selected  = true

    getUnit() {
      for (var i in this.parent.units) {
        if (this.product.unit_id == this.parent.units[i].id) {
          this.product.unit = this.parent.units[i].name
          return
        }
      }
    }
    this.getUnit();

    activate() {
      this.product.available = true;
      this.update()
    }
    deactivate() {
      this.product.available = false;
      this.update()
    }

    edit() {
      this.parent.stopEdition();
      this.product.edition = true
    }

    completeEdition() {
      this.parent.completeEdition(this.product, this);
      this.close()
    }

    close() {
      this.parent.stopEdition();
      this.update()
    }

    updatePrice() {
      // update variables from form
      this.product.margin_percentage = $(this.root).find('input[name="margin_percentage"]')[0].value
      this.product.supplier_price = $(this.root).find('input[name="supplier_price"]')[0].value
      if (this.product.margin_percentage)
        this.product.price = (this.product.supplier_price * (this.product.margin_percentage/100 + 1)).toFixed(2)
    }

    save() {
      var saveUrl = Routes.suppliers_plugin_product_path({profile: noosfero.profile, action: 'edit/'+this.product.id})
      var self = this
      $.post(saveUrl, {product: this.prepareForm()}, function(data) {
        display_notice(self.t('views.product.saved'))
        self.close();
      })
    }

    updateProductFromForm() {
      var keys = ['name', 'available', 'margin_percentage'] // category, unit and prices are automatically updated

      for (var k in keys) {
        var input = $(this.root).find('input[name="'+keys[k]+'"]')[0];

        if (input == undefined) {
        } else {
          if (input.type == "checkbox")
            this.product[keys[k]] = input.checked;
          else
            this.product[keys[k]] = input.value;
        }

      }
    }

    prepareForm() {
      this.updateProductFromForm()

      var data = Object();
      var keys = ['name', 'available', 'product_category_id', 'unit_id', 'price', 'supplier_price', 'margin_percentage']

      var self = this;
      for (var k in keys) {
        data[keys[k]] = self.product[keys[k]]
      }

      return data;
    }

    setCategory(e, item) {
      this.product.product_category_id = item.id
      this.product.category = this.parent.categories[this.product.product_category_id]
    }
    setUnit(e, item) {
      this.product.unit_id = item.id
      this.product.unit = item.name
    }

    editStock() {
      this.parent.setStockModal(this.product)
    }

    this.on('mount', function () {
      this.updatePrice()
      this.update()
      this.parent.typeaheadCategoryInit($(this.root).find('input[name="product_category_id"]'), this.setCategory)
      this.parent.typeaheadUnitInit($(this.root).find('input[name="unit_id"]'), this.setUnit)
    })

